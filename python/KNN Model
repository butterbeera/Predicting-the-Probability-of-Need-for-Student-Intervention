#Import packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn import datasets,model_selection,linear_model,metrics,decomposition


#Read document
df = pd.read_csv("UF_R3_ANALYSIS_LASTMAJOR0714.csv")

#Data Preprocessing
df.isnull().sum()

# Remove the null value
df.dropna(axis=0, how='any',inplace=True)

# Select the students whose "STUDENT_SUCCESSNO" equals to 1 or 2.
df = df.loc[df['STUDENT_SUCCESSNO'].isin(['1','2'])]

dfcat = df[[
    'JUNIOR_SENIOR_FLAGNO',
 'ENRL_CNT',
 'MAJORCOUNT',
 'UF_CLASSNO',
 'RESIDENCYNO',
 'TERM_END_DT_SID_CATGRYNO',
 'TERM_BEG_DT_CATGRYNO',
 'LOW_TERM_GPA_IND',
 'PARTTIME_TERM_IND',
 'NOT_REG_TERM_IND',
 'WITHDRWL_TERM_IND',
 'FULLTIME_TERM_IND',
 'OVR_12HR_TERM_IND'
]]

import seaborn as sns
corcon = dfcat.corr(method='kendall')
f, ax = plt.subplots(figsize=(15,15))
sns.heatmap(corcon, vmax=.8, annot=True, square=True)
plt.show()

dfnum = df.drop([
    'JUNIOR_SENIOR_FLAGNO',
 'ENRL_CNT',
 'MAJORCOUNT',
 'UF_CLASSNO',
 'RESIDENCYNO',
 'TERM_END_DT_SID_CATGRYNO',
 'TERM_BEG_DT_CATGRYNO',
 'LOW_TERM_GPA_IND',
 'PARTTIME_TERM_IND',
 'NOT_REG_TERM_IND',
 'WITHDRWL_TERM_IND',
 'FULLTIME_TERM_IND',
 'OVR_12HR_TERM_IND',
'STUDENT_SUCCESSNO',
'TERM_SID'
],axis=1)

cornum = dfnum.corr(method='pearson')
f, ax = plt.subplots(figsize=(15,15))
sns.heatmap(cornum, vmax=.8, annot=True, square=True)
plt.show()

dfmean = df.drop(['STUDENT_SUCCESSNO', 'TERM_END_DT_SID','TERM_SID','UNT_TAKEN_GPA'], axis= 1).mean()
dfvar = df.drop(['STUDENT_SUCCESSNO', 'TERM_END_DT_SID','TERM_SID','UNT_TAKEN_GPA'], axis= 1)
dfvarlist = dfvar.columns.values.tolist()

df[dfvarlist].fillna(dfmean)

dfnumlist = dfnum.columns.values.tolist()
for i in range(0,len(dfnumlist)-1):  
    dftry = df[dfnumlist[i]]
    IQR = dftry.quantile(0.75) - dftry.quantile(0.25)
    total = np.float(dftry.shape[0])
    upper_limit =dftry.quantile(0.75) + (IQR * 1.5)
    upper_limit_extreme =dftry.quantile(0.75) + (IQR * 3)
    lower_limit =dftry.quantile(0.25) - (IQR * 1.5)
    lower_limit_extreme =dftry.quantile(0.25) - (IQR * 3)
    index1 = df[(df[dfnumlist[i]] > upper_limit)].index
    index2 = df[(df[dfnumlist[i]] < lower_limit)].index
    if (dftry[dftry>upper_limit].shape[0]/total)<=0.02:
        df = df.drop(index1)
    else:df = df
    if (dftry[dftry<lower_limit].shape[0]/total)<=0.02:
        df = df.drop(index2)
    else:df = df

df_JUNIOR_SENIOR_FLAGNO = df['JUNIOR_SENIOR_FLAGNO'].apply(str).str.get_dummies().add_prefix('JUNIOR_SENIOR_FLAGNO: ')
df_ENRL_CNT = df['ENRL_CNT'].apply(str).str.get_dummies().add_prefix('ENRL_CNT: ')
df_MAJORCOUNT = df['MAJORCOUNT'].apply(str).str.get_dummies().add_prefix('MAJORCOUNT: ')
df_UF_CLASSNO = df['UF_CLASSNO'].apply(str).str.get_dummies().add_prefix('UF_CLASSNO: ')
df_RESIDENCYNO = df['RESIDENCYNO'].apply(str).str.get_dummies().add_prefix('RESIDENCYNO: ')
df_TERM_END_DT_SID_CATGRYNO = df['TERM_END_DT_SID_CATGRYNO'].apply(str).str.get_dummies().add_prefix('TERM_END_DT_SID_CATGRYNO: ')
df_TERM_BEG_DT_CATGRYNO = df['TERM_BEG_DT_CATGRYNO'].apply(str).str.get_dummies().add_prefix('TERM_BEG_DT_CATGRYNO: ')
df_LOW_TERM_GPA_IND = df['LOW_TERM_GPA_IND'].apply(str).str.get_dummies().add_prefix('LOW_TERM_GPA_IND: ')
df_PARTTIME_TERM_IND = df['PARTTIME_TERM_IND'].apply(str).str.get_dummies().add_prefix('PARTTIME_TERM_IND: ')
df_NOT_REG_TERM_IND = df['NOT_REG_TERM_IND'].apply(str).str.get_dummies().add_prefix('NOT_REG_TERM_IND: ')
df_WITHDRWL_TERM_IND = df['WITHDRWL_TERM_IND'].apply(str).str.get_dummies().add_prefix('WITHDRWL_TERM_IND: ')
df_FULLTIME_TERM_IND = df['FULLTIME_TERM_IND'].apply(str).str.get_dummies().add_prefix('FULLTIME_TERM_IND: ')
df_OVR_12HR_TERM_IND = df['OVR_12HR_TERM_IND'].apply(str).str.get_dummies().add_prefix('OVR_12HR_TERM_IND: ')
df = pd.concat([df,df_JUNIOR_SENIOR_FLAGNO,df_ENRL_CNT,df_MAJORCOUNT,df_UF_CLASSNO,df_RESIDENCYNO,df_TERM_END_DT_SID_CATGRYNO,df_TERM_BEG_DT_CATGRYNO,df_LOW_TERM_GPA_IND,df_PARTTIME_TERM_IND,df_NOT_REG_TERM_IND,df_WITHDRWL_TERM_IND,df_FULLTIME_TERM_IND,df_OVR_12HR_TERM_IND],axis=1)
df = df.drop([
    'JUNIOR_SENIOR_FLAGNO',
 'ENRL_CNT',
 'MAJORCOUNT',
 'UF_CLASSNO',
 'RESIDENCYNO',
 'TERM_END_DT_SID_CATGRYNO',
 'TERM_BEG_DT_CATGRYNO',
 'LOW_TERM_GPA_IND',
 'PARTTIME_TERM_IND',
 'NOT_REG_TERM_IND',
 'WITHDRWL_TERM_IND',
 'FULLTIME_TERM_IND',
 'OVR_12HR_TERM_IND'
],axis=1)

from sklearn.model_selection import train_test_split
Y = df['STUDENT_SUCCESSNO']
X = df.drop(['STUDENT_SUCCESSNO', 'TERM_END_DT_SID','TERM_SID','UNT_TAKEN_GPA'], axis= 1)
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=3234)
print(X.shape)
print(Y.shape)

from sklearn.neighbors import KNeighborsClassifier as kNN
model = kNN(n_neighbors = 3, algorithm='auto', weights='distance')
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix
print("score on the testdata:",model.score(x_test,y_test))
print (metrics.classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

